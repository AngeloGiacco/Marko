{"version":3,"sources":["lib/firebase.js","lib/firebaseConfig.js","components/App/App.js","components/Dashboard/Dashboard.js","components/Editor/Editor.js","components/SignIn/SignIn.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseAppAuth","auth","providers","googleProvider","GoogleAuthProvider","db","firestore","store","storage","createComponentWithAuth","withFirebaseAuth","signInWithGoogle","signOut","user","className","href","onClick","console","log","alt","src","photoURL","path","signIns","getUserFiles","userId","a","collection","doc","get","exists","id","snapshot","userFiles","forEach","file","data","name","content","push","set","createFile","fileName","add","res","deleteFile","fileId","delete","Dashboard","useState","nameValue","setNameValue","useSWR","error","useEffect","navigate","onSubmit","e","preventDefault","mutate","type","placeholder","value","onChange","target","map","key","to","then","getFile","Editor","setValue","undefined","onUnload","event","returnValue","window","addEventListener","removeEventListener","uploadImage","size","ref","child","put","uploadTask","getDownloadURL","disabled","update","toast","success","defaultValue","getValue","onShowToast","message","SignIn","uid","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8650df10.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nimport firebaseConfig from \"lib/firebaseConfig\";\n\nconst firebaseApp = !firebase.apps.length\n  ? firebase.initializeApp(firebaseConfig)\n  : firebase.app();\nexport const firebaseAppAuth = firebaseApp.auth();\n\nexport const providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nexport const db = firebaseApp.firestore();\nexport const store = firebaseApp.storage();\n","export default {\n  apiKey: \"AIzaSyBIL9Ladlachak0hxP1OqJdNyLr2vOpCUc\",\n  authDomain: \"marko-d2fc5.firebaseapp.com\",\n  databaseURL: \"https://marko-d2fc5.firebaseio.com\",\n  projectId: \"marko-d2fc5\",\n  storageBucket: \"marko-d2fc5.appspot.com\",\n  messagingSenderId: \"1071704516007\",\n  appId: \"1:1071704516007:web:e85179cc21cee9a4064282\",\n};\n","import React from \"react\";\nimport { Router } from \"@reach/router\";\n\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport { firebaseAppAuth, providers } from \"lib/firebase\";\n\nimport { Dashboard, Editor, SignIn } from \"components\";\nimport \"./App.css\";\n\nconst createComponentWithAuth = withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n});\n\nconst App = ({ signInWithGoogle, signOut, user }) => {\n  return (\n    <>\n      <header className=\"header\">\n        <h2>Marko</h2>\n        {user && (\n          <div className=\"user-profile\">\n            <a\n              className=\"log-out-link\"\n              href=\"#log-out\"\n              onClick={() => {\n                console.log(\"Signed out...\");\n                signOut();\n              }}\n            >\n              Log Out\n            </a>\n            <img alt=\"Profile\" className=\"avatar\" src={user.photoURL} />\n          </div>\n        )}\n      </header>\n      <Router>\n        <SignIn path=\"/\" user={user} signIns={{ signInWithGoogle }} />\n        <Dashboard path=\"user/:userId\" user={user} />\n        <Editor path=\"user/:userId/editor/:fileId\" user={user} />\n      </Router>\n    </>\n  );\n};\n\nexport default createComponentWithAuth(App);\n","import React, { useState, useEffect } from \"react\";\nimport useSWR, { mutate } from \"swr\";\nimport { db } from \"lib/firebase\";\nimport { Link, navigate } from \"@reach/router\";\nimport \"./Dashboard.css\";\n\nconst getUserFiles = async (userId) => {\n  const doc = await db.collection(\"users\").doc(userId).get();\n\n  if (doc.exists) {\n    console.log(\"User found in database\");\n    const snapshot = await db\n      .collection(\"users\")\n      .doc(doc.id)\n      .collection(\"files\")\n      .get();\n\n    let userFiles = [];\n    snapshot.forEach((file) => {\n      let { name, content } = file.data();\n      userFiles.push({ id: file.id, name: name, content: content });\n    });\n    return userFiles;\n  } else {\n    console.log(\"User not found in database, creating new entry...\");\n    db.collection(\"users\").doc(userId).set({});\n    return [];\n  }\n};\n\nconst createFile = async (userId, fileName) => {\n  let res = await db.collection(\"users\").doc(userId).collection(\"files\").add({\n    name: fileName,\n    content: \"\",\n  });\n  return res;\n};\n\nconst deleteFile = async (userId, fileId) => {\n  let res = await db\n    .collection(\"users\")\n    .doc(userId)\n    .collection(\"files\")\n    .doc(fileId)\n    .delete();\n  return res;\n};\n\nconst Dashboard = ({ user, userId }) => {\n  const [nameValue, setNameValue] = useState(\"\");\n  const { data, error } = useSWR(userId, getUserFiles);\n\n  useEffect(() => {\n    if (!user) {\n      navigate(\"/\");\n    }\n  }, [user]);\n\n  if (error) {\n    console.log(error);\n    return <p>[Error loading data!]</p>;\n  } else if (!data) return <p>Loading...</p>;\n  else {\n    return (\n      <div>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            if (nameValue) {\n              setNameValue(\"\");\n              createFile(userId, nameValue);\n              mutate(userId);\n            }\n          }}\n          className=\"new-file-form\"\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Your new files name...\"\n            value={nameValue}\n            onChange={(e) => setNameValue(e.target.value)}\n          />\n          <button type=\"submit\" className=\"add-button\">\n            Create\n          </button>\n        </form>\n        <ul className=\"files-list\">\n          {data.map((file) => {\n            return (\n              <li key={file.id} className=\"file\">\n                <Link to={`/user/${userId}/editor/${file.id}`} className=\"link\">\n                  {file.name}\n                </Link>\n                <button\n                  onClick={() => {\n                    deleteFile(userId, file.id).then(() => mutate(userId));\n                  }}\n                  className=\"delete-button\"\n                >\n                  x\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n};\n\nexport default Dashboard;\n","import React, { useState, useEffect } from \"react\";\nimport useSWR, { mutate } from \"swr\";\nimport { db, store } from \"lib/firebase\";\nimport { Link, navigate } from \"@reach/router\";\nimport MarkdownEditor from \"rich-markdown-editor\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nimport \"./Editor.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nconst getFile = async (userId, fileId) => {\n  const doc = await db\n    .collection(\"users\")\n    .doc(userId)\n    .collection(\"files\")\n    .doc(fileId)\n    .get();\n\n  return doc.data();\n};\n\nconst Editor = ({ user, userId, fileId }) => {\n  useEffect(() => {\n    if (!user) {\n      navigate(\"/\");\n    }\n  }, [user]);\n\n  const { data: file, error } = useSWR([userId, fileId], getFile);\n  const [value, setValue] = useState(null);\n\n  useEffect(() => {\n    if (file !== undefined && value === null) {\n      console.log(\"Set initial content\");\n      setValue(file.content);\n    }\n  }, [file, value]);\n\n  const onUnload = (event) => {\n    event.preventDefault();\n    event.returnValue = \"You have unsaved changes!\";\n    return \"You have unsaved changes!\";\n  };\n\n  useEffect(() => {\n    if (file && !(file.content === value)) {\n      window.addEventListener(\"beforeunload\", onUnload);\n    } else {\n      window.removeEventListener(\"beforeunload\", onUnload);\n    }\n\n    return () => window.removeEventListener(\"beforeunload\", onUnload);\n  });\n\n  const saveChanges = () => {\n    db.collection(\"users\").doc(userId).collection(\"files\").doc(fileId).update({\n      content: value,\n    });\n    mutate([userId, fileId]);\n    toast.success(\"🎉 Your changes have been saved!\");\n  };\n\n  const uploadImage = async (file) => {\n    if (!file.size >= 1000000) {\n      const doc = await db\n        .collection(\"users\")\n        .doc(userId)\n        .collection(\"images\")\n        .add({\n          name: file.name,\n        });\n\n      const uploadTask = await store\n        .ref()\n        .child(`users/${userId}/${doc.id}-${file.name}`)\n        .put(file);\n\n      return uploadTask.ref.getDownloadURL();\n    }\n  };\n\n  if (error) return <p>We had an issue while getting the data</p>;\n  else if (!file) return <p>Loading...</p>;\n  else {\n    return (\n      <div>\n        <header className=\"editor-header\">\n          <Link className=\"back-button\" to={`/user/${userId}`}>\n            &lt;\n          </Link>\n          <h3>{file.name}</h3>\n          <button\n            disabled={file.content === value}\n            onClick={saveChanges}\n            className=\"save-button\"\n          >\n            Save Changes\n          </button>\n        </header>\n        <div className=\"editor\">\n          <MarkdownEditor\n            defaultValue={file.content}\n            onChange={(getValue) => {\n              setValue(getValue());\n            }}\n            uploadImage={uploadImage}\n            onShowToast={(message) => toast(message)}\n          />\n        </div>\n        <ToastContainer />\n      </div>\n    );\n  }\n};\n\nexport default Editor;\n","import React, { useEffect } from \"react\";\nimport { navigate } from \"@reach/router\";\n\nconst SignIn = ({ user, signIns: { signInWithGoogle } }) => {\n  useEffect(() => {\n    if (user) {\n      navigate(`/user/${user.uid}`);\n    }\n  }, [user]);\n\n  return (\n    <div className=\"sign-in-page\">\n      <h3>\n        Welcome to Marko a simple &amp; beautiful online markdown editor for\n        taking notes\n      </h3>\n      <p>\n        Sign in with your social accounts to have files that are synced accross\n        devices\n      </p>\n      <div className=\"sign-in-buttons\">\n        <button onClick={signInWithGoogle}>Sign in with Google</button>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"components\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}